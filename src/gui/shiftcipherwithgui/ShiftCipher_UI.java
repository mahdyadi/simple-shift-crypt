/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.shiftcipherwithgui;
import shiftcipherwithgui.ShiftCipher;

/**
 *
 * @author Drianka Mahdy
 */
public class ShiftCipher_UI extends javax.swing.JFrame {

    public ShiftCipher shiftCipherEntity;
    /**
     * Creates new form ShiftCipher_UI
     */
    public ShiftCipher_UI() {
        initComponents();
        shiftCipherEntity = new ShiftCipher();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel5 = new javax.swing.JPanel();
        PlainTextPanel = new javax.swing.JPanel();
        PlainTextField = new javax.swing.JTextField();
        EncryptButton = new javax.swing.JButton();
        CipherTextPanel = new javax.swing.JPanel();
        CipherTextField = new javax.swing.JTextField();
        DecryptButton = new javax.swing.JButton();
        DetailsPanel = new javax.swing.JPanel();
        KeyUsedLabel = new javax.swing.JLabel();
        PlaintTextLabel = new javax.swing.JLabel();
        CipherTextLabel = new javax.swing.JLabel();
        TimeElapsedLabel = new javax.swing.JLabel();
        TimeElapsedShownLabel = new javax.swing.JLabel();
        LastActionLabel = new javax.swing.JLabel();
        LastActionTextInfo = new javax.swing.JTextField();
        CipherTextInfo = new javax.swing.JTextField();
        KeyUsedInfo = new javax.swing.JTextField();
        PlainTextInfo = new javax.swing.JTextField();
        KeyPanel = new javax.swing.JPanel();
        KeyField = new javax.swing.JTextField();
        KeyButton = new javax.swing.JButton();
        ClearKeyButton = new javax.swing.JButton();

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("PlainText"));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple Shift Cipher");

        PlainTextPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("PlainText"));

        PlainTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlainTextFieldActionPerformed(evt);
            }
        });

        EncryptButton.setText("Encrypt");
        EncryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncryptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PlainTextPanelLayout = new javax.swing.GroupLayout(PlainTextPanel);
        PlainTextPanel.setLayout(PlainTextPanelLayout);
        PlainTextPanelLayout.setHorizontalGroup(
            PlainTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PlainTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PlainTextPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(EncryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        PlainTextPanelLayout.setVerticalGroup(
            PlainTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PlainTextPanelLayout.createSequentialGroup()
                .addComponent(PlainTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(EncryptButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        CipherTextPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("CipherText"));

        DecryptButton.setText("Decrypt");
        DecryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecryptButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout CipherTextPanelLayout = new javax.swing.GroupLayout(CipherTextPanel);
        CipherTextPanel.setLayout(CipherTextPanelLayout);
        CipherTextPanelLayout.setHorizontalGroup(
            CipherTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(CipherTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, CipherTextPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(DecryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        CipherTextPanelLayout.setVerticalGroup(
            CipherTextPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(CipherTextPanelLayout.createSequentialGroup()
                .addComponent(CipherTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addComponent(DecryptButton)
                .addContainerGap())
        );

        DetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        KeyUsedLabel.setText("Key used:");

        PlaintTextLabel.setText("PlainText:");

        CipherTextLabel.setText("CipherText");

        TimeElapsedLabel.setText("TimeElapsed:");

        TimeElapsedShownLabel.setText("0.00");

        LastActionLabel.setText("LastAction:");

        LastActionTextInfo.setEditable(false);
        LastActionTextInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastActionTextInfoActionPerformed(evt);
            }
        });

        CipherTextInfo.setEditable(false);

        KeyUsedInfo.setEditable(false);
        KeyUsedInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeyUsedInfoActionPerformed(evt);
            }
        });

        PlainTextInfo.setEditable(false);

        javax.swing.GroupLayout DetailsPanelLayout = new javax.swing.GroupLayout(DetailsPanel);
        DetailsPanel.setLayout(DetailsPanelLayout);
        DetailsPanelLayout.setHorizontalGroup(
            DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LastActionTextInfo)
                    .addGroup(DetailsPanelLayout.createSequentialGroup()
                        .addGroup(DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LastActionLabel)
                            .addGroup(DetailsPanelLayout.createSequentialGroup()
                                .addComponent(TimeElapsedLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(TimeElapsedShownLabel)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(DetailsPanelLayout.createSequentialGroup()
                        .addGroup(DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CipherTextLabel)
                            .addComponent(PlaintTextLabel)
                            .addComponent(KeyUsedLabel))
                        .addGap(18, 18, 18)
                        .addGroup(DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(KeyUsedInfo)
                            .addComponent(CipherTextInfo)
                            .addComponent(PlainTextInfo))))
                .addContainerGap())
        );
        DetailsPanelLayout.setVerticalGroup(
            DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LastActionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(LastActionTextInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CipherTextLabel)
                    .addComponent(CipherTextInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PlaintTextLabel)
                    .addComponent(PlainTextInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KeyUsedLabel)
                    .addComponent(KeyUsedInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(DetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TimeElapsedShownLabel)
                    .addComponent(TimeElapsedLabel))
                .addGap(21, 21, 21))
        );

        KeyPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Key"));

        KeyField.setEditable(false);

        KeyButton.setText("Generate");
        KeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KeyButtonActionPerformed(evt);
            }
        });

        ClearKeyButton.setText("Clear");
        ClearKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearKeyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout KeyPanelLayout = new javax.swing.GroupLayout(KeyPanel);
        KeyPanel.setLayout(KeyPanelLayout);
        KeyPanelLayout.setHorizontalGroup(
            KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(KeyField, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, KeyPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClearKeyButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(KeyButton)
                .addContainerGap())
        );
        KeyPanelLayout.setVerticalGroup(
            KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(KeyPanelLayout.createSequentialGroup()
                .addComponent(KeyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(KeyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(KeyButton)
                    .addComponent(ClearKeyButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PlainTextPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CipherTextPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(KeyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(DetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PlainTextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(CipherTextPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(KeyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EncryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncryptButtonActionPerformed
        // TODO add your handling code here:
        long startTime;
        long stopTime;
        long elapsedTime;
        String encryptResult;
        
        try{
            shiftCipherEntity.inputChecker(PlainTextField.getText());
            if(KeyField.getText().length() == PlainTextField.getText().length()){
                startTime = System.nanoTime();
                encryptResult = new String(shiftCipherEntity.encryptWithoutGeneratingKey(PlainTextField.getText()));
                stopTime = System.nanoTime();
                elapsedTime = stopTime - startTime;
                LastActionTextInfo.setText("Encrypt plaintext without generating new key");
            } else{
                startTime = System.nanoTime();
                encryptResult = new String(shiftCipherEntity.encrypt(PlainTextField.getText()));
                stopTime = System.nanoTime();
                elapsedTime = stopTime - startTime;
                LastActionTextInfo.setText("Encrypt plaintext and generating new key");
            }
             
            CipherTextField.setText(encryptResult);
            KeyField.setText(shiftCipherEntity.getKey());
            CipherTextInfo.setText(CipherTextField.getText());
            PlainTextInfo.setText(PlainTextField.getText());
            KeyUsedInfo.setText(KeyField.getText());
            TimeElapsedShownLabel.setText(Double.toString((double)elapsedTime/1000000.0)+" millisecond");
        } catch(Exception e){
            LastActionTextInfo.setText(e.getMessage());
            KeyField.setText("");
            CipherTextInfo.setText("");
            PlainTextInfo.setText("");
            KeyUsedInfo.setText("");
            TimeElapsedShownLabel.setText("");
        } 
    }//GEN-LAST:event_EncryptButtonActionPerformed

    private void DecryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecryptButtonActionPerformed
        // TODO add your handling code here:
         try{
            shiftCipherEntity.inputChecker(CipherTextField.getText());
            long startTime = System.nanoTime();
            String encryptResult = new String(shiftCipherEntity.decrypt(CipherTextField.getText()));
            long stopTime = System.nanoTime();
            long elapsedTime = stopTime - startTime;
            
            LastActionTextInfo.setText("Decrypt ciphertext with key");
            PlainTextField.setText(encryptResult);
            KeyField.setText(shiftCipherEntity.getKey());
            CipherTextInfo.setText(CipherTextField.getText());
            PlainTextInfo.setText(PlainTextField.getText());
            KeyUsedInfo.setText(KeyField.getText());
            TimeElapsedShownLabel.setText(Double.toString((double)elapsedTime/1000000.0)+" millisecond");
        } catch(Exception e){
             LastActionTextInfo.setText(e.getMessage());
             KeyField.setText("");
            CipherTextInfo.setText("");
            PlainTextInfo.setText("");
            KeyUsedInfo.setText("");
            TimeElapsedShownLabel.setText("");
        }
    }//GEN-LAST:event_DecryptButtonActionPerformed

    private void KeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeyButtonActionPerformed
        // TODO add your handling code here:
        try{
            shiftCipherEntity.inputChecker(CipherTextField.getText());
            long startTime = System.nanoTime();
            shiftCipherEntity.setKey(shiftCipherEntity.generateKey(PlainTextField.getText().length()));
            long stopTime = System.nanoTime();
            long elapsedTime = stopTime - startTime;
           
            LastActionTextInfo.setText("Generating random key only with length equals to plaintext");
            KeyField.setText(shiftCipherEntity.getKey());
            CipherTextInfo.setText("");
            PlainTextInfo.setText(PlainTextField.getText());
            KeyUsedInfo.setText(KeyField.getText());
            TimeElapsedShownLabel.setText(Double.toString((double)elapsedTime/1000000.0)+" millisecond");
        } catch(Exception e){
            LastActionTextInfo.setText(e.getMessage());
            KeyField.setText("");
            CipherTextInfo.setText("");
            PlainTextInfo.setText("");
            KeyUsedInfo.setText("");
            TimeElapsedShownLabel.setText("");
        }
    }//GEN-LAST:event_KeyButtonActionPerformed

    private void KeyUsedInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KeyUsedInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_KeyUsedInfoActionPerformed

    private void LastActionTextInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastActionTextInfoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LastActionTextInfoActionPerformed

    private void PlainTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlainTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PlainTextFieldActionPerformed

    private void ClearKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearKeyButtonActionPerformed
        // TODO add your handling code here:
        shiftCipherEntity.clearKey();
        LastActionTextInfo.setText("Cleared Key");
        KeyField.setText("");
        KeyUsedInfo.setText("");
        TimeElapsedShownLabel.setText("");
    }//GEN-LAST:event_ClearKeyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShiftCipher_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShiftCipher_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShiftCipher_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShiftCipher_UI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
                
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShiftCipher_UI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CipherTextField;
    private javax.swing.JTextField CipherTextInfo;
    private javax.swing.JLabel CipherTextLabel;
    private javax.swing.JPanel CipherTextPanel;
    private javax.swing.JButton ClearKeyButton;
    private javax.swing.JButton DecryptButton;
    private javax.swing.JPanel DetailsPanel;
    private javax.swing.JButton EncryptButton;
    private javax.swing.JButton KeyButton;
    private javax.swing.JTextField KeyField;
    private javax.swing.JPanel KeyPanel;
    private javax.swing.JTextField KeyUsedInfo;
    private javax.swing.JLabel KeyUsedLabel;
    private javax.swing.JLabel LastActionLabel;
    private javax.swing.JTextField LastActionTextInfo;
    private javax.swing.JTextField PlainTextField;
    private javax.swing.JTextField PlainTextInfo;
    private javax.swing.JPanel PlainTextPanel;
    private javax.swing.JLabel PlaintTextLabel;
    private javax.swing.JLabel TimeElapsedLabel;
    private javax.swing.JLabel TimeElapsedShownLabel;
    private javax.swing.JPanel jPanel5;
    // End of variables declaration//GEN-END:variables
}
